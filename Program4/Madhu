/*Problem 4
Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.
In case of multiple subarrays, return the subarray which comes first on moving from left to right.

Example 1:
Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.*/

#include<iostream>
using namespace std;

//Aproach 2 with better efficiency
void sort(int ar[],int n,int s){
    int tot=ar[0], start=0;

    for (int i = 1; i < n; i++)
    {
        while(tot>s && start<i-1){
            tot=tot-ar[start];
            start++;

        }
        if(tot==s){
            cout<<"Found in pos"<<start+1 <<" to"<<i;
            break;
        }
        else{
            tot=tot+ar[i];
        }
    }
    
}
int main(){
    int arr[]={1,2,3,7,5};
    int n=5;
    int s;
    cout<<"Enter the sum";
    cin>>s;
    
    sort(arr,n,s);
   
    for (int i = 0; i < n; i++)
    {
       int sum=0;
       for(int j=i;j<n;j++){
           sum=sum+arr[j];
           if(sum==s){
               cout<<i+1<<" "<<j+1<<endl;
               break;//Using only this gives pos of all the ele of sub array with the given sum.
               int found=1;
               
           }
       }
       if(found==1){
       break;
    }
  
    return 0;
}


